"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.mergeMediaConfig = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _immutable = require("immutable");

var _core = require("@emotion/core");

var _slate = require("slate");

var _slateReact = require("slate-react");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _styles = require("../styles");

var _serializers = require("../serializers");

var _Toolbar = _interopRequireDefault(require("../MarkdownControl/Toolbar"));

var _renderers = require("./renderers");

var _visual = _interopRequireDefault(require("./plugins/visual"));

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const visualEditorStyles = ({
  minimal
}) => `
  position: relative;
  overflow: hidden;
  overflow-x: auto;
  font-family: ${_netlifyCmsUiDefault.fonts.primary};
  min-height: ${minimal ? 'auto' : _netlifyCmsUiDefault.lengths.richTextEditorMinHeight};
  border-top-left-radius: 0;
  border-top-right-radius: 0;
  border-top: 0;
  margin-top: -${_styles.editorStyleVars.stickyDistanceBottom};
  padding: 0;
  display: flex;
  flex-direction: column;
  z-index: ${_netlifyCmsUiDefault.zIndex.zIndex100};
`;

const InsertionPoint = (0, _styledBase.default)("div", {
  target: "evezps90",
  label: "InsertionPoint"
})(process.env.NODE_ENV === "production" ? {
  name: "b2d31m",
  styles: "flex:1 1 auto;cursor:text;"
} : {
  name: "b2d31m",
  styles: "flex:1 1 auto;cursor:text;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const createEmptyRawDoc = () => {
  const emptyText = _slate.Text.create('');

  const emptyBlock = _slate.Block.create({
    object: 'block',
    type: 'paragraph',
    nodes: [emptyText]
  });

  return {
    nodes: [emptyBlock]
  };
};

const createSlateValue = (rawValue, {
  voidCodeBlock
}) => {
  const rawDoc = rawValue && (0, _serializers.markdownToSlate)(rawValue, {
    voidCodeBlock
  });
  const rawDocHasNodes = !(0, _isEmpty2.default)((0, _get2.default)(rawDoc, 'nodes'));

  const document = _slate.Document.fromJSON(rawDocHasNodes ? rawDoc : createEmptyRawDoc());

  return _slate.Value.create({
    document
  });
};

const mergeMediaConfig = (editorComponents, field) => {
  // merge editor media library config to image components
  if (editorComponents.has('image')) {
    const imageComponent = editorComponents.get('image');
    const fields = imageComponent === null || imageComponent === void 0 ? void 0 : imageComponent.fields;

    if (fields) {
      imageComponent.fields = fields.update(fields.findIndex(f => f.get('widget') === 'image'), f => {
        // merge `media_library` config
        if (field.has('media_library')) {
          f = f.set('media_library', field.get('media_library').mergeDeep(f.get('media_library')));
        } // merge 'media_folder'


        if (field.has('media_folder') && !f.has('media_folder')) {
          f = f.set('media_folder', field.get('media_folder'));
        } // merge 'public_folder'


        if (field.has('public_folder') && !f.has('public_folder')) {
          f = f.set('public_folder', field.get('public_folder'));
        }

        return f;
      });
    }
  }
};

exports.mergeMediaConfig = mergeMediaConfig;

var _ref = process.env.NODE_ENV === "production" ? {
  name: "t5h4ts-Editor",
  styles: "position:relative;;label:Editor;"
} : {
  name: "t5h4ts-Editor",
  styles: "position:relative;;label:Editor;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

class Editor extends _react.default.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "handleMarkClick", type => {
      this.editor.toggleMark(type).focus();
    });

    _defineProperty(this, "handleBlockClick", type => {
      this.editor.toggleBlock(type).focus();
    });

    _defineProperty(this, "handleLinkClick", () => {
      this.editor.toggleLink(() => window.prompt('Enter the URL of the link'));
    });

    _defineProperty(this, "hasMark", type => this.editor && this.editor.hasMark(type));

    _defineProperty(this, "hasInline", type => this.editor && this.editor.hasInline(type));

    _defineProperty(this, "hasBlock", type => this.editor && this.editor.hasBlock(type));

    _defineProperty(this, "handleToggleMode", () => {
      this.props.onMode('raw');
    });

    _defineProperty(this, "handleInsertShortcode", pluginConfig => {
      this.editor.insertShortcode(pluginConfig);
    });

    _defineProperty(this, "handleClickBelowDocument", () => {
      this.editor.moveToEndOfDocument();
    });

    _defineProperty(this, "handleDocumentChange", (0, _debounce2.default)(editor => {
      const {
        onChange
      } = this.props;
      const raw = editor.value.document.toJS();
      const markdown = (0, _serializers.slateToMarkdown)(raw, {
        voidCodeBlock: this.codeBlockComponent
      });
      onChange(markdown);
    }, 150));

    _defineProperty(this, "handleChange", editor => {
      if (!this.state.value.document.equals(editor.value.document)) {
        this.handleDocumentChange(editor);
      }

      this.setState({
        value: editor.value
      });
    });

    _defineProperty(this, "processRef", ref => {
      this.editor = ref;
    });

    const editorComponents = props.getEditorComponents();
    this.shortcodeComponents = editorComponents.filter(({
      type
    }) => type === 'shortcode');
    this.codeBlockComponent = (0, _immutable.fromJS)(editorComponents.find(({
      type
    }) => type === 'code-block'));
    this.editorComponents = this.codeBlockComponent || editorComponents.has('code-block') ? editorComponents : editorComponents.set('code-block', {
      label: 'Code Block',
      type: 'code-block'
    });
    mergeMediaConfig(this.editorComponents, this.props.field);
    this.renderBlock = (0, _renderers.renderBlock)({
      classNameWrapper: props.className,
      resolveWidget: props.resolveWidget,
      codeBlockComponent: this.codeBlockComponent
    });
    this.renderInline = (0, _renderers.renderInline)();
    this.renderMark = (0, _renderers.renderMark)();
    this.schema = (0, _schema.default)({
      voidCodeBlock: !!this.codeBlockComponent
    });
    this.plugins = (0, _visual.default)({
      getAsset: props.getAsset,
      resolveWidget: props.resolveWidget
    });
    this.state = {
      value: createSlateValue(this.props.value, {
        voidCodeBlock: !!this.codeBlockComponent
      })
    };
  }

  shouldComponentUpdate(nextProps, nextState) {
    return !this.state.value.equals(nextState.value);
  }

  componentDidMount() {
    if (this.props.pendingFocus) {
      this.editor.focus();
      this.props.pendingFocus();
    }
  }

  render() {
    const {
      onAddAsset,
      getAsset,
      className,
      field,
      isShowModeToggle,
      t
    } = this.props;
    return (0, _core.jsx)("div", {
      css: _ref
    }, (0, _core.jsx)(_styles.EditorControlBar, null, (0, _core.jsx)(_Toolbar.default, {
      onMarkClick: this.handleMarkClick,
      onBlockClick: this.handleBlockClick,
      onLinkClick: this.handleLinkClick,
      onToggleMode: this.handleToggleMode,
      plugins: this.editorComponents,
      onSubmit: this.handleInsertShortcode,
      onAddAsset: onAddAsset,
      getAsset: getAsset,
      buttons: field.get('buttons'),
      editorComponents: field.get('editor_components'),
      hasMark: this.hasMark,
      hasInline: this.hasInline,
      hasBlock: this.hasBlock,
      isShowModeToggle: isShowModeToggle,
      t: t
    })), (0, _core.jsx)(_core.ClassNames, null, ({
      css,
      cx
    }) => (0, _core.jsx)("div", {
      className: cx(className, css`
                  ${visualEditorStyles({
        minimal: field.get('minimal')
      })}
                `)
    }, (0, _core.jsx)(_slateReact.Editor, {
      className: css`
                  padding: 16px 20px 0;
                `,
      value: this.state.value,
      renderBlock: this.renderBlock,
      renderInline: this.renderInline,
      renderMark: this.renderMark,
      schema: this.schema,
      plugins: this.plugins,
      onChange: this.handleChange,
      ref: this.processRef,
      spellCheck: true
    }), (0, _core.jsx)(InsertionPoint, {
      onClick: this.handleClickBelowDocument
    }))));
  }

}

exports.default = Editor;

_defineProperty(Editor, "propTypes", {
  onAddAsset: _propTypes.default.func.isRequired,
  getAsset: _propTypes.default.func.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onMode: _propTypes.default.func.isRequired,
  className: _propTypes.default.string.isRequired,
  value: _propTypes.default.string,
  field: _reactImmutableProptypes.default.map.isRequired,
  getEditorComponents: _propTypes.default.func.isRequired,
  isShowModeToggle: _propTypes.default.bool.isRequired,
  t: _propTypes.default.func.isRequired
});